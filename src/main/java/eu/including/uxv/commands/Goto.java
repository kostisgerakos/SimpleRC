/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package eu.including.uxv.commands;  
@SuppressWarnings("all")
/** Command a system to move to a given location at a given speed */
@org.apache.avro.specific.AvroGenerated
public class Goto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3536175439429736814L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Goto\",\"namespace\":\"eu.including.uxv.commands\",\"doc\":\"Command a system to move to a given location at a given speed\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"namespace\":\"eu.including.uxv\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the originating system\"},{\"name\":\"sourceModule\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Canonical name of the module within a given system that originated the message\"},{\"name\":\"time\",\"type\":\"long\",\"doc\":\"Time elapsed since the Unix epoch\",\"unit\":\"ms\"}]}},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude in the WGS 84 reference coordinate system\",\"unit\":\"rad\",\"min\":-1.570796326794897,\"max\":1.570796326794897},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude in the WGS 84 reference coordinate system\",\"unit\":\"rad\",\"min\":-3.141592653589793,\"max\":3.141592653589793},{\"name\":\"height\",\"type\":\"float\",\"doc\":\"Height above the WGS 84 ellipsoid\",\"unit\":\"m\"},{\"name\":\"n\",\"type\":\"double\",\"doc\":\"The North offset of the North/East/Down field with respect to Latitude/Longitude/Height\",\"unit\":\"m\"},{\"name\":\"e\",\"type\":\"double\",\"doc\":\"The East offset of the North/East/Down field with respect to Latitude/Longitude/Height\",\"unit\":\"m\"},{\"name\":\"d\",\"type\":\"double\",\"doc\":\"The Down offset of the North/East/Down field with respect to Latitude/Longitude/Height\",\"unit\":\"m\"},{\"name\":\"depth\",\"type\":[\"float\",\"null\"],\"doc\":\"Depth\",\"unit\":\"m\"},{\"name\":\"altitude\",\"type\":[\"float\",\"null\"],\"doc\":\"Altitude\",\"unit\":\"m\"}]},\"doc\":\"Desired location\"},{\"name\":\"speed\",\"type\":[\"float\",\"null\"],\"unit\":\"m/s\"},{\"name\":\"timeout\",\"type\":\"float\",\"unit\":\"s\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   public eu.including.uxv.Header header;
  /** Desired location */
   public eu.including.uxv.commands.Location location;
   public java.lang.Float speed;
   public float timeout;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Goto() {}

  /**
   * All-args constructor.
   * @param location Desired location
   */
  public Goto(eu.including.uxv.Header header, eu.including.uxv.commands.Location location, java.lang.Float speed, java.lang.Float timeout) {
    this.header = header;
    this.location = location;
    this.speed = speed;
    this.timeout = timeout;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return location;
    case 2: return speed;
    case 3: return timeout;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.including.uxv.Header)value$; break;
    case 1: location = (eu.including.uxv.commands.Location)value$; break;
    case 2: speed = (java.lang.Float)value$; break;
    case 3: timeout = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   */
  public eu.including.uxv.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.including.uxv.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return Desired location
   */
  public eu.including.uxv.commands.Location getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * Desired location
   * @param value the value to set.
   */
  public void setLocation(eu.including.uxv.commands.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'speed' field.
   */
  public java.lang.Float getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Float value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'timeout' field.
   */
  public java.lang.Float getTimeout() {
    return timeout;
  }

  /**
   * Sets the value of the 'timeout' field.
   * @param value the value to set.
   */
  public void setTimeout(java.lang.Float value) {
    this.timeout = value;
  }

  /**
   * Creates a new Goto RecordBuilder.
   * @return A new Goto RecordBuilder
   */
  public static eu.including.uxv.commands.Goto.Builder newBuilder() {
    return new eu.including.uxv.commands.Goto.Builder();
  }
  
  /**
   * Creates a new Goto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Goto RecordBuilder
   */
  public static eu.including.uxv.commands.Goto.Builder newBuilder(eu.including.uxv.commands.Goto.Builder other) {
    return new eu.including.uxv.commands.Goto.Builder(other);
  }
  
  /**
   * Creates a new Goto RecordBuilder by copying an existing Goto instance.
   * @param other The existing instance to copy.
   * @return A new Goto RecordBuilder
   */
  public static eu.including.uxv.commands.Goto.Builder newBuilder(eu.including.uxv.commands.Goto other) {
    return new eu.including.uxv.commands.Goto.Builder(other);
  }
  
  /**
   * RecordBuilder for Goto instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Goto>
    implements org.apache.avro.data.RecordBuilder<Goto> {

    private eu.including.uxv.Header header;
    private eu.including.uxv.Header.Builder headerBuilder;
    /** Desired location */
    private eu.including.uxv.commands.Location location;
    private eu.including.uxv.commands.Location.Builder locationBuilder;
    private java.lang.Float speed;
    private float timeout;

    /** Creates a new Builder */
    private Builder() {
      super(eu.including.uxv.commands.Goto.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.including.uxv.commands.Goto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.including.uxv.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = eu.including.uxv.commands.Location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeout)) {
        this.timeout = data().deepCopy(fields()[3].schema(), other.timeout);
        fieldSetFlags()[3] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Goto instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.including.uxv.commands.Goto other) {
            super(eu.including.uxv.commands.Goto.SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timeout)) {
        this.timeout = data().deepCopy(fields()[3].schema(), other.timeout);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.including.uxv.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder setHeader(eu.including.uxv.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.including.uxv.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.including.uxv.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.including.uxv.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @return This builder.
     */
    public eu.including.uxv.commands.Goto.Builder setHeaderBuilder(eu.including.uxv.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * Desired location
      * @return The value.
      */
    public eu.including.uxv.commands.Location getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * Desired location
      * @param value The value of 'location'.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder setLocation(eu.including.uxv.commands.Location value) {
      validate(fields()[1], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'location' field has been set.
      * Desired location
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * Desired location
     * @return This builder.
     */
    public eu.including.uxv.commands.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(eu.including.uxv.commands.Location.newBuilder(location));
        } else {
          setLocationBuilder(eu.including.uxv.commands.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * Desired location
     * @return This builder.
     */
    public eu.including.uxv.commands.Goto.Builder setLocationBuilder(eu.including.uxv.commands.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * Desired location
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * Desired location
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Float getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder setSpeed(java.lang.Float value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder clearSpeed() {
      speed = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeout' field.
      * @return The value.
      */
    public java.lang.Float getTimeout() {
      return timeout;
    }

    /**
      * Sets the value of the 'timeout' field.
      * @param value The value of 'timeout'.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder setTimeout(float value) {
      validate(fields()[3], value);
      this.timeout = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'timeout' field has been set.
      * @return True if the 'timeout' field has been set, false otherwise.
      */
    public boolean hasTimeout() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timeout' field.
      * @return This builder.
      */
    public eu.including.uxv.commands.Goto.Builder clearTimeout() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Goto build() {
      try {
        Goto record = new Goto();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.including.uxv.Header) defaultValue(fields()[0]);
        }
        if (locationBuilder != null) {
          record.location = this.locationBuilder.build();
        } else {
          record.location = fieldSetFlags()[1] ? this.location : (eu.including.uxv.commands.Location) defaultValue(fields()[1]);
        }
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Float) defaultValue(fields()[2]);
        record.timeout = fieldSetFlags()[3] ? this.timeout : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
